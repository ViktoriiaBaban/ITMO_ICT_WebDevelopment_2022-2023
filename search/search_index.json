{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to ViktoriiaBaban \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\" \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043a\u0438 \u0433\u0440\u0443\u043f\u043f\u044b \u041a33412 \u0411\u0430\u0431\u0430\u043d \u0412\u0438\u043a\u0442\u043e\u0440\u0438\u0438 \u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438. \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django.","title":"Home"},{"location":"#welcome-to-viktoriiababan","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043f\u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0443 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\" \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043a\u0438 \u0433\u0440\u0443\u043f\u043f\u044b \u041a33412 \u0411\u0430\u0431\u0430\u043d \u0412\u0438\u043a\u0442\u043e\u0440\u0438\u0438","title":"Welcome to ViktoriiaBaban"},{"location":"#_1","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438. \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u043d\u0430 django.","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0442"},{"location":"lab_1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 server.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) conn, addr = sock.accept() print('connected with:', addr) while True: data = conn.recv(1024) print(data.decode(\"utf-8\")) if not data: break conn.send(b'Hello, client.\\n') conn.close() client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) sock.send(b'Hello, server.\\n') data = sock.recv(1024) print(data.decode(\"utf-8\")) sock.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server.py import socket from math import sqrt sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) conn, addr = sock.accept() print('connected:', addr) while True: data = conn.recv(1024).decode() try: data = data.split(\" \") katet_1 = float(data[0]) katet_2 = float(data[1]) gipotenyza = float(data[2]) except: conn.sendall('\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445!\\n'.encode()) else: if katet_2 == 0: katet_2 = sqrt(gipotenyza**2 - katet_1**2) conn.sendall(f'\u0412\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0442\u0435\u0442 \u0438\u043c\u0435\u0435\u0442 \u0434\u043b\u0438\u043d\u0443: {katet_2}\\n'.encode()) elif gipotenyza == 0: gipotenyza = sqrt(katet_1**2 + katet_2**2) conn.sendall(f'\u0413\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430 \u0438\u043c\u0435\u0435\u0442 \u0434\u043b\u0438\u043d\u0443: {gipotenyza}\\n'.encode()) else: if gipotenyza == sqrt(katet_1**2 + katet_2**2): conn.sendall('\u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f. \u0412\u0441\u0451 \u0432\u0435\u0440\u043d\u043e, \u044d\u0442\u043e - \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u044b\u0439 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a.'.encode()) else: conn.sendall('\u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f. \u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u043d\u0435 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u044b\u0439!'.encode()) if not data: break conn.send(b'Hello, client.\\n') conn.close() client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) data = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043a\u0430\u0442\u0435\u0442\u043e\u0432: \").replace(\" \", \"\") data += \" \" + input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 - \u0432\u0432\u0435\u0434\u0438\u0442\u0435 0: \").replace(\" \", \"\") data += \" \" + input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 - \u0432\u0432\u0435\u0434\u0438\u0442\u0435 0: \").replace(\" \", \"\") sock.send(data.encode()) result = sock.recv(1024) print(result.decode(\"utf-8\")) sock.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 server.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) conn, addr = sock.accept() print('connected with:', addr) with open('index.html') as f: page = f.read() response = 'HTTP/1.0 200 OK\\n\\n' + \"Content-Type: text/html\\n\\n\" + page conn.sendall(response.encode(\"utf-8\")) conn.close() client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) data = sock.recv(1024) print(data.decode(\"utf-8\")) sock.close() index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>My page</title> </head> <body> <h1>Welcome, friend!</h1> </body> </html> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 server.py import socket import threading def send_message(sock, msg): for client in clients: if sock != client: client.send(msg) def handle_client(socket, address, username): if not clients.setdefault(socket): clients[socket] = username print(f'{username}[{address[0]}:{address[1]}] \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443') send_message(socket, f'\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {username} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443'.encode()) while True: try: message = socket.recv(1024) if message.decode('utf-8').find('EXIT FROM CHAT') != -1: print(f'{username}[{address[0]}:{address[1]}] \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442') send_message(socket, f'\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {username} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442'.encode()) clients.pop(socket) break send_message(socket, message) except ConnectionResetError: print(f'{username}[{address[0]}:{address[1]}] \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u043e\u043f\u0430\u043b...') send_message(socket, f'\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {username} \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u043e\u043f\u0430\u043b...'.encode()) break socket.close() sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) clients = {} while True: try: conn, addr = sock.accept() data = conn.recv(1024).decode('utf-8') t1 = threading.Thread(target=handle_client, args=(conn, addr, data)) t1.start() except KeyboardInterrupt: print('Server stopped') break conn.close() client.py import threading import socket import time def get_message(): while True: try: data = sock.recv(1024).decode('utf-8') print(data) except socket.error: time.sleep(0.5) continue def write_message(): while True: message = input() sock.sendto(('[' + name + '] ' + message).encode('utf-8'), server) if message == 'EXIT FROM CHAT': break sock.close() sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) name = input('\u0412\u0432\u0435\u0434\u0438 \u0441\u0432\u043e\u0439 \u043d\u0438\u043a\u043d\u044d\u0439\u043c: ') print(f'\u041f\u0440\u0438\u0432\u0435\u0442, {name}! \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u0448\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.') print('\u0415\u0441\u043b\u0438 \u0437\u0430\u0445\u043e\u0447\u0435\u0448\u044c \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u0447\u0430\u0442\u0430 \u043d\u0430\u043f\u0438\u0448\u0438 EXIT FROM CHAT\\n') server = '', 9523 sock.sendto((name).encode('utf-8'), server) thread_send = threading.Thread(target=write_message, args=()) thread_get = threading.Thread(target=get_message, args=()) thread_send.start() thread_get.start() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 server.py import socket class MyHTTPServer: def __init__(self, host, port, name): self.host = host self.port = port self.name = name self.marks = [] def serve_forever(self): serve_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) serve_socket.bind((self.host, self.port)) serve_socket.listen(10) print('hi') while True: client_socket, address = serve_socket.accept() self.serve_client(client_socket) def serve_client(self, sock): data = sock.recv(4096).decode(\"utf-8\") request = self.parse_request(data) response = self.handle_request(request) sock.send(response.encode()) def parse_request(self, data): request_line = data.split('\\r\\n')[0] words = request_line.split() if len(words) == 3: try: par = data.split('\\r\\n')[-1] param = {} for p in par.split(\"&\"): param[p[:p.index('=')]] = p[p.index('=') + 1:] req = {\"method\": words[0], \"url\": words[1], \"version\": words[2], \"parametrs\": param} except: req = {\"method\": words[0], \"url\": words[1], \"version\": words[2], \"parametrs\": {}} else: raise Exception('Malformed request line') print(req) return req def parse_headers(self, data): lines = data.split('\\r\\n')[1:] headers = {} for line in lines: parts = line.split(': ') headers[parts[0]] = parts[1] return headers def handle_request(self, request): response = f\"{request['version']} 200 OK\\n\\n\" if request['method'] == 'GET' and request['url'] == \"/\": with open('index.html') as page: response += page.read() elif request['method'] == 'GET' and request['url'] == \"/view\": body = '<!DOCTYPE html>' \\ '<html lang=\"ru\">' \\ '<head>' \\ '<meta charset=\"UTF-8\">' \\ '<title>\u041e\u0446\u0435\u043d\u043a\u0438</title>' \\ '</head>' \\ '<body>' \\ '<table align=\"center\" width=\"20%\" border=\"1\">' for subject, mark in self.marks: body +=f\"<tr><td>{subject}</td><td>{mark}</td></tr>\" body += '</table></body></html>' response += body elif request['method'] == 'POST': self.marks.append((request['parametrs']['subject'], request['parametrs']['mark'])) return response if __name__ == '__main__': host = 'localhost' port = 9523 name = 'torry-site.ru' serv = MyHTTPServer(host, port, name) try: serv.serve_forever() except KeyboardInterrupt: pass index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Marks</title> <script> function submitForm() { let http = new XMLHttpRequest(); http.open(\"POST\", \"http://127.0.0.1:9523/view\", true); http.setRequestHeader(\"Content\",\"text/html\"); let params = \"?mark=\" + document.getElementById(\"mark\").value + \"&subject=\" + document.getElementById(\"subject\").value; http.send(params); } </script> </head> <body> <form action=\"\" method=\"post\" align=\"center\" onsubmit=\"submitForm();\"> <br> <div> <label for=\"subject\">Subject:</label> <input type=\"text\" id=\"subject\" name=\"subject\"/> </div> <br> <div> <label for=\"mark\">Mark:</label> <input type=\"number\" id=\"mark\" name=\"mark\"/> </div> <br> <div> <input type=\"submit\"> </div> </form> </body> </html>","title":"\u041b\u0420 1"},{"location":"lab_1/#1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438"},{"location":"lab_1/#1_1","text":"server.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) conn, addr = sock.accept() print('connected with:', addr) while True: data = conn.recv(1024) print(data.decode(\"utf-8\")) if not data: break conn.send(b'Hello, client.\\n') conn.close() client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) sock.send(b'Hello, server.\\n') data = sock.recv(1024) print(data.decode(\"utf-8\")) sock.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab_1/#2","text":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server.py import socket from math import sqrt sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) conn, addr = sock.accept() print('connected:', addr) while True: data = conn.recv(1024).decode() try: data = data.split(\" \") katet_1 = float(data[0]) katet_2 = float(data[1]) gipotenyza = float(data[2]) except: conn.sendall('\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445!\\n'.encode()) else: if katet_2 == 0: katet_2 = sqrt(gipotenyza**2 - katet_1**2) conn.sendall(f'\u0412\u0442\u043e\u0440\u043e\u0439 \u043a\u0430\u0442\u0435\u0442 \u0438\u043c\u0435\u0435\u0442 \u0434\u043b\u0438\u043d\u0443: {katet_2}\\n'.encode()) elif gipotenyza == 0: gipotenyza = sqrt(katet_1**2 + katet_2**2) conn.sendall(f'\u0413\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430 \u0438\u043c\u0435\u0435\u0442 \u0434\u043b\u0438\u043d\u0443: {gipotenyza}\\n'.encode()) else: if gipotenyza == sqrt(katet_1**2 + katet_2**2): conn.sendall('\u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f. \u0412\u0441\u0451 \u0432\u0435\u0440\u043d\u043e, \u044d\u0442\u043e - \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u044b\u0439 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a.'.encode()) else: conn.sendall('\u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f. \u0422\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a \u043d\u0435 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u044b\u0439!'.encode()) if not data: break conn.send(b'Hello, client.\\n') conn.close() client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) data = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043a\u0430\u0442\u0435\u0442\u043e\u0432: \").replace(\" \", \"\") data += \" \" + input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0430\u0442\u0435\u0442\u0430, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 - \u0432\u0432\u0435\u0434\u0438\u0442\u0435 0: \").replace(\" \", \"\") data += \" \" + input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b, \u0435\u0441\u043b\u0438 \u043e\u043d\u043e \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e, \u0438\u043d\u0430\u0447\u0435 - \u0432\u0432\u0435\u0434\u0438\u0442\u0435 0: \").replace(\" \", \"\") sock.send(data.encode()) result = sock.recv(1024) print(result.decode(\"utf-8\")) sock.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab_1/#3","text":"server.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) conn, addr = sock.accept() print('connected with:', addr) with open('index.html') as f: page = f.read() response = 'HTTP/1.0 200 OK\\n\\n' + \"Content-Type: text/html\\n\\n\" + page conn.sendall(response.encode(\"utf-8\")) conn.close() client.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) data = sock.recv(1024) print(data.decode(\"utf-8\")) sock.close() index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>My page</title> </head> <body> <h1>Welcome, friend!</h1> </body> </html>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"lab_1/#4","text":"server.py import socket import threading def send_message(sock, msg): for client in clients: if sock != client: client.send(msg) def handle_client(socket, address, username): if not clients.setdefault(socket): clients[socket] = username print(f'{username}[{address[0]}:{address[1]}] \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443') send_message(socket, f'\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {username} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443'.encode()) while True: try: message = socket.recv(1024) if message.decode('utf-8').find('EXIT FROM CHAT') != -1: print(f'{username}[{address[0]}:{address[1]}] \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442') send_message(socket, f'\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {username} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442'.encode()) clients.pop(socket) break send_message(socket, message) except ConnectionResetError: print(f'{username}[{address[0]}:{address[1]}] \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u043e\u043f\u0430\u043b...') send_message(socket, f'\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c {username} \u043d\u0435\u043e\u0436\u0438\u0434\u0430\u043d\u043d\u043e \u043f\u0440\u043e\u043f\u0430\u043b...'.encode()) break socket.close() sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9523)) sock.listen(10) clients = {} while True: try: conn, addr = sock.accept() data = conn.recv(1024).decode('utf-8') t1 = threading.Thread(target=handle_client, args=(conn, addr, data)) t1.start() except KeyboardInterrupt: print('Server stopped') break conn.close() client.py import threading import socket import time def get_message(): while True: try: data = sock.recv(1024).decode('utf-8') print(data) except socket.error: time.sleep(0.5) continue def write_message(): while True: message = input() sock.sendto(('[' + name + '] ' + message).encode('utf-8'), server) if message == 'EXIT FROM CHAT': break sock.close() sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9523)) name = input('\u0412\u0432\u0435\u0434\u0438 \u0441\u0432\u043e\u0439 \u043d\u0438\u043a\u043d\u044d\u0439\u043c: ') print(f'\u041f\u0440\u0438\u0432\u0435\u0442, {name}! \u0422\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u0448\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.') print('\u0415\u0441\u043b\u0438 \u0437\u0430\u0445\u043e\u0447\u0435\u0448\u044c \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u0447\u0430\u0442\u0430 \u043d\u0430\u043f\u0438\u0448\u0438 EXIT FROM CHAT\\n') server = '', 9523 sock.sendto((name).encode('utf-8'), server) thread_send = threading.Thread(target=write_message, args=()) thread_get = threading.Thread(target=get_message, args=()) thread_send.start() thread_get.start()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"lab_1/#5","text":"server.py import socket class MyHTTPServer: def __init__(self, host, port, name): self.host = host self.port = port self.name = name self.marks = [] def serve_forever(self): serve_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) serve_socket.bind((self.host, self.port)) serve_socket.listen(10) print('hi') while True: client_socket, address = serve_socket.accept() self.serve_client(client_socket) def serve_client(self, sock): data = sock.recv(4096).decode(\"utf-8\") request = self.parse_request(data) response = self.handle_request(request) sock.send(response.encode()) def parse_request(self, data): request_line = data.split('\\r\\n')[0] words = request_line.split() if len(words) == 3: try: par = data.split('\\r\\n')[-1] param = {} for p in par.split(\"&\"): param[p[:p.index('=')]] = p[p.index('=') + 1:] req = {\"method\": words[0], \"url\": words[1], \"version\": words[2], \"parametrs\": param} except: req = {\"method\": words[0], \"url\": words[1], \"version\": words[2], \"parametrs\": {}} else: raise Exception('Malformed request line') print(req) return req def parse_headers(self, data): lines = data.split('\\r\\n')[1:] headers = {} for line in lines: parts = line.split(': ') headers[parts[0]] = parts[1] return headers def handle_request(self, request): response = f\"{request['version']} 200 OK\\n\\n\" if request['method'] == 'GET' and request['url'] == \"/\": with open('index.html') as page: response += page.read() elif request['method'] == 'GET' and request['url'] == \"/view\": body = '<!DOCTYPE html>' \\ '<html lang=\"ru\">' \\ '<head>' \\ '<meta charset=\"UTF-8\">' \\ '<title>\u041e\u0446\u0435\u043d\u043a\u0438</title>' \\ '</head>' \\ '<body>' \\ '<table align=\"center\" width=\"20%\" border=\"1\">' for subject, mark in self.marks: body +=f\"<tr><td>{subject}</td><td>{mark}</td></tr>\" body += '</table></body></html>' response += body elif request['method'] == 'POST': self.marks.append((request['parametrs']['subject'], request['parametrs']['mark'])) return response if __name__ == '__main__': host = 'localhost' port = 9523 name = 'torry-site.ru' serv = MyHTTPServer(host, port, name) try: serv.serve_forever() except KeyboardInterrupt: pass index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Marks</title> <script> function submitForm() { let http = new XMLHttpRequest(); http.open(\"POST\", \"http://127.0.0.1:9523/view\", true); http.setRequestHeader(\"Content\",\"text/html\"); let params = \"?mark=\" + document.getElementById(\"mark\").value + \"&subject=\" + document.getElementById(\"subject\").value; http.send(params); } </script> </head> <body> <form action=\"\" method=\"post\" align=\"center\" onsubmit=\"submitForm();\"> <br> <div> <label for=\"subject\">Subject:</label> <input type=\"text\" id=\"subject\" name=\"subject\"/> </div> <br> <div> <label for=\"mark\">Mark:</label> <input type=\"number\" id=\"mark\" name=\"mark\"/> </div> <br> <div> <input type=\"submit\"> </div> </form> </body> </html>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"lab_2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \"\u041e\u0442\u0435\u043b\u0438\" models.py from django.core.validators import MinValueValidator, MaxValueValidator from django.core.exceptions import ValidationError from django.db import models class Hotel(models.Model): name = models.CharField(\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", max_length=50, primary_key=True) owner = models.CharField(\"\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043e\u0442\u0435\u043b\u044f\", max_length=50) address = models.CharField(\"\u0410\u0434\u0440\u0435\u0441 \u043e\u0442\u0435\u043b\u044f\", max_length=100) class Room(models.Model): TYPE_ROOM = [ ('S', '\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442'), ('\u0421', '\u041a\u043e\u043c\u0444\u043e\u0440\u0442'), ('L', '\u041b\u044e\u043a\u0441'), ('F', '\u0421\u0435\u043c\u0435\u0439\u043d\u044b\u0439'), ('P', '\u041f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442\u0441\u043a\u0438\u0439'), ('A', '\u0410\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u044b') ] hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name=\"\u041e\u0442\u0435\u043b\u044c\") number = models.IntegerField(\"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\") description = models.CharField(\"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430\", max_length=1000) type_room = models.CharField(\"\u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430\", max_length=1, choices=TYPE_ROOM) beds = models.PositiveSmallIntegerField(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043f\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\", validators=[MinValueValidator(1)]) price = models.PositiveIntegerField(\"\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u043e\u043c\u0435\u0440\u0430\") class Meta: # One hotel can't have two rooms with the same number unique_together = ('hotel', 'number') class Guest(models.Model): last_name = models.CharField(\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", max_length=30, null=False) first_name = models.CharField(\"\u0418\u043c\u044f\", max_length=30, null=False) passport = models.CharField(\"\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\", primary_key=True, max_length=30) class Booking(models.Model): hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name=\"\u041e\u0442\u0435\u043b\u044c\") room = models.ForeignKey(Room, on_delete=models.CASCADE) guest = models.ForeignKey(Guest, on_delete=models.CASCADE) date_start = models.DateField(\"\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430\") date_end = models.DateField(\"\u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430\") total_price = models.PositiveIntegerField(\"\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f\", null=False) @property def days(self): return (self.date_end - self.date_start).days def check_date(self): if self.date_start >= self.date_end: raise ValidationError(\"\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0439!\") def save(self, *args, **kwargs): self.total_price = self.room.price * self.days super(Booking, self).save(*args, **kwargs) class Feedback(models.Model): booking = models.ForeignKey(Booking, on_delete=models.CASCADE, verbose_name=\"\u041a\u043e\u0434 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\") author = models.CharField(\"\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0432\u0430\u0448 \u043d\u0438\u043a\", max_length=30) rate = models.IntegerField(\"\u041e\u0446\u0435\u043d\u043a\u0430\", default=0, validators=[MaxValueValidator(10), MinValueValidator(1)]) date_start = models.DateField(\"\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430\") date_end = models.DateField(\"\u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430\") text = models.TextField(\"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439\", null=False) def save(self, *args, **kwargs): self.date_start = self.booking.date_start self.date_end = self.booking.date_end super(Feedback, self).save(*args, **kwargs) urls.py from django.contrib import admin from django.urls import path from hotels.views import * urlpatterns = [ path(\"admin/\", admin.site.urls), path('main/', main_page, name='main_page'), path(\"guests/add/\", AddGuests.as_view(), name='add_guest'), path('guests/<str:hotel_name>', guests_list), path(\"rooms/\", ListRooms.as_view(), name='rooms'), path(\"bookings/create\", CreateBooking.as_view(), name='add_booking'), path(\"bookings/my/\", MyBookings, name='my_bookings'), path(\"bookings/<int:guest_passport>/\", UserBookings), path(\"bookings/update/<int:pk>\", UpdateBooking.as_view()), path(\"bookings/delete/<int:pk>\", DeleteBooking.as_view()), path(\"feedbacks/add/\", AddFeedback, name='give_feedback'), path('feedbacks/',AllFeedbacks, name='all_feedbacks'), path('hotel/', get_hotel, name='hotel'), ] forms.py from django import forms from hotels.models import Feedback class CreateFeedback(forms.ModelForm): class Meta: model = Feedback fields = ['booking', 'author', 'text', 'rate'] admin.py from django.contrib import admin from hotels.models import * admin.site.register(Booking) admin.site.register(Hotel) admin.site.register(Guest) admin.site.register(Feedback) admin.site.register(Room) views.py from django.shortcuts import render, redirect from django.http import Http404 from hotels.models import Hotel, Booking, Room, Guest, Feedback from django.views.generic import ListView, UpdateView, CreateView, DeleteView from hotels.forms import CreateFeedback # \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 def main_page(request): return render(request, 'main_page.html') # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f class AddGuests(CreateView): model = Guest fields = [ \"last_name\", \"first_name\", \"passport\", ] template_name = \"add_guest.html\" success_url = \"/main/\" # \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 class ListRooms(ListView): model = Room template_name = 'list_rooms.html' # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f class CreateBooking(CreateView): model = Booking fields = [ 'hotel', 'room', 'guest', 'date_start', 'date_end' ] template_name = 'create_booking.html' success_url = '/bookings/my/' # \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f class UpdateBooking(UpdateView): model = Booking fields = ['room', 'date_start', 'date_end'] template_name = 'update_booking.html' success_url = '/bookings/my/' # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f class DeleteBooking(DeleteView): model = Booking template_name = 'delete_booking.html' success_url = '/bookings/my/' # \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f def UserBookings(request, guest_passport): need_book = Booking.objects.filter(guest=guest_passport) current_book = {\"object_list\": need_book} return render(request, 'users_bookings.html', current_book) # \u043e\u0442\u0431\u043e\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 def MyBookings(request): try: passport = int(request.POST.get('passport_user')) return redirect(f\"/bookings/{passport}/\") except: return render(request, \"my_bookings.html\") # \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 def AddFeedback(request): data = {} form = CreateFeedback(request.POST) if form.is_valid(): form.save() data['form'] = form return render(request, 'give_feedback.html', data) # \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 def AllFeedbacks(request): list_comments = {\"object_list\": Feedback.objects.all()} return render(request, 'all_feedbacks.html', list_comments) # \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0433\u043e\u0441\u0442\u0435\u0439 \u043e\u0442\u0435\u043b\u044f def get_hotel(request): hotel = request.POST.get('hotel_name') if hotel: return redirect(f\"/guests/{hotel}\") else: return render(request, 'hotel.html') def guests_list(request, hotel_name): guest_in_hotel = Booking.objects.filter(hotel=hotel_name).values_list('guest') nedeed_guests = Guest.objects.filter(passport__in=guest_in_hotel) list_of_guests = { \"object_list\": nedeed_guests, \"hotel_name\": hotel_name} return render(request, 'guests.html', list_of_guests) HTML-\u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 main_page.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\"> <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\" crossorigin=\"anonymous\"></script> <title>Main</title> </head> <body> <div class = 'd-flex align-items-center flex-column'> <h1> \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439, \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u0438 \u0433\u043e\u0441\u0442\u0435\u0439 </h1> </div> <main class=\"container p-5\"> <div class=\"row p-1\"> <div class=\"col-sm-4\"> <div class=\"card bg-success text-center\"> <div class=\"card-body\"> <a href=\"{% url 'add_guest' %}\" class=\"btn btn-outline-light \">\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0433\u043e\u0441\u0442\u044f</a> </div> </div> </div> <div class=\"col-sm-4\"> <div class=\"card bg-danger text-center\"> <div class=\"card-body\"> <a href=\"{% url 'add_booking' %}\" class=\"btn btn-outline-light\">\u0417\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c</a> </div> </div> </div> <div class=\"col-sm-4\"> <div class=\"card bg-success text-center\"> <div class=\"card-body\"> <a href=\"{% url 'my_bookings' %}\" class=\"btn btn-outline-light\">\u041c\u043e\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f</a> </div> </div> </div> </div> <div class=\"row p-1\"> <div class=\"col-sm-4\"> <div class=\"card bg-danger text-center\"> <div class=\"card-body\"> <a href=\"{% url 'rooms' %}\" class=\"btn btn-outline-light\">\u041a\u043e\u043c\u043d\u0430\u0442\u044b</a> </div> </div> </div> <div class=\"col-sm-4\"> <div class=\"card bg-success text-center\"> <div class=\"card-body\"> <a href=\"{% url 'all_feedbacks' %}\" class=\"btn btn-outline-light\">\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043e\u0442\u0437\u044b\u0432\u044b</a> </div> </div> </div> <div class=\"col-sm-4\"> <div class=\"card bg-danger text-center\"> <div class=\"card-body\"> <a href=\"{% url 'give_feedback' %}\" class=\"btn btn-outline-light\">\u041e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0437\u044b\u0432</a> </div> </div> </div> </div> <div class=\"row p-1 \"> <div class=\"col-sm-4\"> <div class=\"card bg-success text-center\"> <div class=\"card-body\"> <a href=\"{% url 'hotel' %}\" class=\"btn btn-outline-light\">\u041a\u043b\u0438\u0435\u043d\u0442\u044b \u043e\u0442\u0435\u043b\u044f</a> </div> </div> </div> <div class=\"col-sm-4\"> <div class=\"card bg-danger text-center\"> <div class=\"card-body\"> <a href=\"/admin/\" class=\"btn btn-outline-light\">\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440</a> </div> </div> </div> </div> </main> </body> </html> add_guest.html ```<!DOCTYPE html> New guest \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0433\u043e\u0441\u0442\u044f {% csrf_token %} {{ form.as_p }} \u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c * all_feedbacks.html All feedbacks \u041e\u0442\u0435\u043b\u044c \u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0410\u0432\u0442\u043e\u0440 \u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430 \u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430 \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 {% for feedback in object_list %} {{ feedback.booking.room.hotel.name }} {{ feedback.booking.room.number }} {{ feedback.author }} {{ feedback.date_start }} {{ feedback.date_end }} {{ feedback.text }} {% endfor %} * create_booking.html Create booking \u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b {% csrf_token %} {{ form.as_p }} \u0421\u043e\u0437\u0434\u0430\u0442\u044c * delete_booking.html Delete your booking \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f {% csrf_token %} \u0412\u044b \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0445\u043e\u0442\u0438\u0442\u0435 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \"{{ object }}\"? * give_feedback.html Give your feedback! \u041e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u0441\u0432\u043e\u0439 \u043e\u0442\u0437\u044b\u0432 {% csrf_token %} {{ form.as_p }} \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c * guests.html All guests \u0413\u043e\u0441\u0442\u0438 \u043e\u0442\u0435\u043b\u044f {{ hotel_name }} \u0424\u0430\u043c\u0438\u043b\u0438\u044f \u0418\u043c\u044f {% for guest in object_list %} {{ guest.last_name }} {{ guest.first_name }} {% endfor %} * hotel.html Hotel \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f: {% csrf_token %} {{ form.as_p }} \u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u044c * list_rooms.html \u041d\u043e\u043c\u0435\u0440\u0430 \u0432 \u043e\u0442\u0435\u043b\u0435 \u041e\u0442\u0435\u043b\u044c \u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043f\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0441\u0442 \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u043e\u043c\u0435\u0440\u0430 \u0437\u0430 \u043d\u043e\u0447\u044c {% for room in object_list %} {{ room.hotel.name }} {{ room.number }} {{ room.description}} {{ room.type_room}} {{ room.beds }} {{ room.price}} {% endfor %} * my_bookings.html My bookings \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430: {% csrf_token %} {{ form.as_p }} \u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u044c * update_booking.html Update your booking \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f {% block content %} {% csrf_token %} {{ form.as_p }} \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c {% endblock %} * users_bookings.html All bookings \u041d\u043e\u043c\u0435\u0440 \u0437\u0430\u043a\u0430\u0437\u0430 \u041e\u0442\u0435\u043b\u044c \u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430 \u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430 \u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 {% for booking in object_list %} {{ booking.id }} {{ booking.room.hotel.name }} {{ booking.room.number }} {{ booking.date_start }} {{ booking.date_end}} {{ booking.total_price }} \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0423\u0434\u0430\u043b\u0438\u0442\u044c {% endfor %} ```","title":"\u041b\u0420 2"},{"location":"lab_2/#2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2"},{"location":"lab_2/#_1","text":"models.py from django.core.validators import MinValueValidator, MaxValueValidator from django.core.exceptions import ValidationError from django.db import models class Hotel(models.Model): name = models.CharField(\"\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f\", max_length=50, primary_key=True) owner = models.CharField(\"\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043e\u0442\u0435\u043b\u044f\", max_length=50) address = models.CharField(\"\u0410\u0434\u0440\u0435\u0441 \u043e\u0442\u0435\u043b\u044f\", max_length=100) class Room(models.Model): TYPE_ROOM = [ ('S', '\u0421\u0442\u0430\u043d\u0434\u0430\u0440\u0442'), ('\u0421', '\u041a\u043e\u043c\u0444\u043e\u0440\u0442'), ('L', '\u041b\u044e\u043a\u0441'), ('F', '\u0421\u0435\u043c\u0435\u0439\u043d\u044b\u0439'), ('P', '\u041f\u0440\u0435\u0437\u0438\u0434\u0435\u043d\u0442\u0441\u043a\u0438\u0439'), ('A', '\u0410\u043f\u0430\u0440\u0442\u0430\u043c\u0435\u043d\u0442\u044b') ] hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name=\"\u041e\u0442\u0435\u043b\u044c\") number = models.IntegerField(\"\u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b\") description = models.CharField(\"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430\", max_length=1000) type_room = models.CharField(\"\u0422\u0438\u043f \u043d\u043e\u043c\u0435\u0440\u0430\", max_length=1, choices=TYPE_ROOM) beds = models.PositiveSmallIntegerField(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043f\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\", validators=[MinValueValidator(1)]) price = models.PositiveIntegerField(\"\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043d\u043e\u043c\u0435\u0440\u0430\") class Meta: # One hotel can't have two rooms with the same number unique_together = ('hotel', 'number') class Guest(models.Model): last_name = models.CharField(\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", max_length=30, null=False) first_name = models.CharField(\"\u0418\u043c\u044f\", max_length=30, null=False) passport = models.CharField(\"\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\", primary_key=True, max_length=30) class Booking(models.Model): hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE, verbose_name=\"\u041e\u0442\u0435\u043b\u044c\") room = models.ForeignKey(Room, on_delete=models.CASCADE) guest = models.ForeignKey(Guest, on_delete=models.CASCADE) date_start = models.DateField(\"\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430\") date_end = models.DateField(\"\u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430\") total_price = models.PositiveIntegerField(\"\u0421\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f\", null=False) @property def days(self): return (self.date_end - self.date_start).days def check_date(self): if self.date_start >= self.date_end: raise ValidationError(\"\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u0434\u0430\u0442\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u0439!\") def save(self, *args, **kwargs): self.total_price = self.room.price * self.days super(Booking, self).save(*args, **kwargs) class Feedback(models.Model): booking = models.ForeignKey(Booking, on_delete=models.CASCADE, verbose_name=\"\u041a\u043e\u0434 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\") author = models.CharField(\"\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0432\u0430\u0448 \u043d\u0438\u043a\", max_length=30) rate = models.IntegerField(\"\u041e\u0446\u0435\u043d\u043a\u0430\", default=0, validators=[MaxValueValidator(10), MinValueValidator(1)]) date_start = models.DateField(\"\u0414\u0430\u0442\u0430 \u0437\u0430\u0435\u0437\u0434\u0430\") date_end = models.DateField(\"\u0414\u0430\u0442\u0430 \u0432\u044b\u0435\u0437\u0434\u0430\") text = models.TextField(\"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439\", null=False) def save(self, *args, **kwargs): self.date_start = self.booking.date_start self.date_end = self.booking.date_end super(Feedback, self).save(*args, **kwargs) urls.py from django.contrib import admin from django.urls import path from hotels.views import * urlpatterns = [ path(\"admin/\", admin.site.urls), path('main/', main_page, name='main_page'), path(\"guests/add/\", AddGuests.as_view(), name='add_guest'), path('guests/<str:hotel_name>', guests_list), path(\"rooms/\", ListRooms.as_view(), name='rooms'), path(\"bookings/create\", CreateBooking.as_view(), name='add_booking'), path(\"bookings/my/\", MyBookings, name='my_bookings'), path(\"bookings/<int:guest_passport>/\", UserBookings), path(\"bookings/update/<int:pk>\", UpdateBooking.as_view()), path(\"bookings/delete/<int:pk>\", DeleteBooking.as_view()), path(\"feedbacks/add/\", AddFeedback, name='give_feedback'), path('feedbacks/',AllFeedbacks, name='all_feedbacks'), path('hotel/', get_hotel, name='hotel'), ] forms.py from django import forms from hotels.models import Feedback class CreateFeedback(forms.ModelForm): class Meta: model = Feedback fields = ['booking', 'author', 'text', 'rate'] admin.py from django.contrib import admin from hotels.models import * admin.site.register(Booking) admin.site.register(Hotel) admin.site.register(Guest) admin.site.register(Feedback) admin.site.register(Room) views.py from django.shortcuts import render, redirect from django.http import Http404 from hotels.models import Hotel, Booking, Room, Guest, Feedback from django.views.generic import ListView, UpdateView, CreateView, DeleteView from hotels.forms import CreateFeedback # \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 def main_page(request): return render(request, 'main_page.html') # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f class AddGuests(CreateView): model = Guest fields = [ \"last_name\", \"first_name\", \"passport\", ] template_name = \"add_guest.html\" success_url = \"/main/\" # \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0432\u0441\u0435\u0445 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 class ListRooms(ListView): model = Room template_name = 'list_rooms.html' # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f class CreateBooking(CreateView): model = Booking fields = [ 'hotel', 'room', 'guest', 'date_start', 'date_end' ] template_name = 'create_booking.html' success_url = '/bookings/my/' # \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f class UpdateBooking(UpdateView): model = Booking fields = ['room', 'date_start', 'date_end'] template_name = 'update_booking.html' success_url = '/bookings/my/' # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f class DeleteBooking(DeleteView): model = Booking template_name = 'delete_booking.html' success_url = '/bookings/my/' # \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f def UserBookings(request, guest_passport): need_book = Booking.objects.filter(guest=guest_passport) current_book = {\"object_list\": need_book} return render(request, 'users_bookings.html', current_book) # \u043e\u0442\u0431\u043e\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 def MyBookings(request): try: passport = int(request.POST.get('passport_user')) return redirect(f\"/bookings/{passport}/\") except: return render(request, \"my_bookings.html\") # \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 def AddFeedback(request): data = {} form = CreateFeedback(request.POST) if form.is_valid(): form.save() data['form'] = form return render(request, 'give_feedback.html', data) # \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 def AllFeedbacks(request): list_comments = {\"object_list\": Feedback.objects.all()} return render(request, 'all_feedbacks.html', list_comments) # \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0433\u043e\u0441\u0442\u0435\u0439 \u043e\u0442\u0435\u043b\u044f def get_hotel(request): hotel = request.POST.get('hotel_name') if hotel: return redirect(f\"/guests/{hotel}\") else: return render(request, 'hotel.html') def guests_list(request, hotel_name): guest_in_hotel = Booking.objects.filter(hotel=hotel_name).values_list('guest') nedeed_guests = Guest.objects.filter(passport__in=guest_in_hotel) list_of_guests = { \"object_list\": nedeed_guests, \"hotel_name\": hotel_name} return render(request, 'guests.html', list_of_guests)","title":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442 \"\u041e\u0442\u0435\u043b\u0438\""},{"location":"lab_2/#html-","text":"main_page.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\"> <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\" crossorigin=\"anonymous\"></script> <title>Main</title> </head> <body> <div class = 'd-flex align-items-center flex-column'> <h1> \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439, \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u0438 \u0433\u043e\u0441\u0442\u0435\u0439 </h1> </div> <main class=\"container p-5\"> <div class=\"row p-1\"> <div class=\"col-sm-4\"> <div class=\"card bg-success text-center\"> <div class=\"card-body\"> <a href=\"{% url 'add_guest' %}\" class=\"btn btn-outline-light \">\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0433\u043e\u0441\u0442\u044f</a> </div> </div> </div> <div class=\"col-sm-4\"> <div class=\"card bg-danger text-center\"> <div class=\"card-body\"> <a href=\"{% url 'add_booking' %}\" class=\"btn btn-outline-light\">\u0417\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c</a> </div> </div> </div> <div class=\"col-sm-4\"> <div class=\"card bg-success text-center\"> <div class=\"card-body\"> <a href=\"{% url 'my_bookings' %}\" class=\"btn btn-outline-light\">\u041c\u043e\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f</a> </div> </div> </div> </div> <div class=\"row p-1\"> <div class=\"col-sm-4\"> <div class=\"card bg-danger text-center\"> <div class=\"card-body\"> <a href=\"{% url 'rooms' %}\" class=\"btn btn-outline-light\">\u041a\u043e\u043c\u043d\u0430\u0442\u044b</a> </div> </div> </div> <div class=\"col-sm-4\"> <div class=\"card bg-success text-center\"> <div class=\"card-body\"> <a href=\"{% url 'all_feedbacks' %}\" class=\"btn btn-outline-light\">\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043e\u0442\u0437\u044b\u0432\u044b</a> </div> </div> </div> <div class=\"col-sm-4\"> <div class=\"card bg-danger text-center\"> <div class=\"card-body\"> <a href=\"{% url 'give_feedback' %}\" class=\"btn btn-outline-light\">\u041e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0442\u0437\u044b\u0432</a> </div> </div> </div> </div> <div class=\"row p-1 \"> <div class=\"col-sm-4\"> <div class=\"card bg-success text-center\"> <div class=\"card-body\"> <a href=\"{% url 'hotel' %}\" class=\"btn btn-outline-light\">\u041a\u043b\u0438\u0435\u043d\u0442\u044b \u043e\u0442\u0435\u043b\u044f</a> </div> </div> </div> <div class=\"col-sm-4\"> <div class=\"card bg-danger text-center\"> <div class=\"card-body\"> <a href=\"/admin/\" class=\"btn btn-outline-light\">\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440</a> </div> </div> </div> </div> </main> </body> </html> add_guest.html ```<!DOCTYPE html> New guest","title":"HTML-\u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u0438\u0446"}]}